import createUser from "@/lib/actions/user.action";
import { WebhookEvent } from "@clerk/nextjs/server";
import { headers } from "next/headers";
import { NextResponse } from "next/server";
import { Webhook } from "svix";

export async function POST(request: Request) {
  // L·∫•y th√¥ng tin t·ª´ headers c·ªßa request
  const svixId = headers().get("svix-id") ?? "";
  const svixTimestamp = headers().get("svix-timestamp") ?? "";
  const svixSignature = headers().get("svix-signature") ?? "";

  // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ WEBHOOK_SECRET
  if (!process.env.WEBHOOK_SECRET) {
    throw new Error("WEBHOOK_SECRET is not set");
  }

  // Ki·ªÉm tra n·∫øu thi·∫øu headers t·ª´ Svix
  if (!svixId || !svixTimestamp || !svixSignature) {
    return new Response("Bad Request: Missing SVIX headers", { status: 400 });
  }

  // ƒê·ªçc payload JSON t·ª´ request
  const payload = await request.json();
  const body = JSON.stringify(payload);

  const svix = new Webhook(process.env.WEBHOOK_SECRET);
  let message: WebhookEvent;

  try {
    // X√°c minh webhook signature
    message = svix.verify(body, {
      "svix-id": svixId,
      "svix-timestamp": svixTimestamp,
      "svix-signature": svixSignature,
    }) as WebhookEvent;
  } catch (error) {
    console.error("SVIX verification failed:", error);
    return new Response("Unauthorized", { status: 401 });
  }

  // X·ª≠ l√Ω s·ª± ki·ªán user.created
  if (message.type === "user.created") {
    const userData = message.data;

    // L·∫•y c√°c th√¥ng tin c·∫ßn thi·∫øt t·ª´ webhook payload
    const clerkId = userData.id;
    const rawEmail = userData.email_addresses?.[0]?.email_address || "";
    const safeEmail = rawEmail.trim().toLowerCase();

    const username = userData.username || safeEmail.split("@")[0];
    const firstName = userData.first_name;
    const lastName = userData.last_name;

    const safeName =
      (firstName && lastName && `${firstName} ${lastName}`) ||
      firstName ||
      lastName ||
      username;

    const avatar = userData.image_url || userData.profile_image_url || "";

    // In ra th√¥ng tin ng∆∞·ªùi d√πng
    console.log("Th√¥ng tin user:", {
      clerkId,
      safeEmail,
      safeName,
      username,
      avatar,
    });

    // Ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
    if (!clerkId || !safeEmail || !safeName || !username) {
      console.error("‚ùå Thi·∫øu d·ªØ li·ªáu b·∫Øt bu·ªôc:", {
        clerkId,
        safeEmail,
        safeName,
        username,
      });
      return new Response("Missing required user fields", { status: 400 });
    }

    try {
      // In ra th√¥ng tin tr∆∞·ªõc khi g·ªçi h√†m t·∫°o user
      console.log("üì¶ ƒêang t·∫°o user:", {
        clerkId,
        email: safeEmail,
        name: safeName,
        username,
        avatar,
      });

      // G·ªçi h√†m t·∫°o user
      const user = await createUser({
        username,
        name: safeName,
        email: safeEmail,
        clerkId,
        avatar,
      });

      // N·∫øu user ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng
      console.log("‚úÖ User ƒë√£ ƒë∆∞·ª£c t·∫°o ho·∫∑c t√°i s·ª≠ d·ª•ng:", user);
      return NextResponse.json({
        message: "User created or reused successfully",
        user,
      });
    } catch (error: any) {
      // L·ªói khi t·∫°o user
      console.error("‚ùå L·ªói khi t·∫°o user:", error.message || error);
      return new Response("Internal Server Error", { status: 500 });
    }
  }

  // Tr·∫£ v·ªÅ 200 cho c√°c s·ª± ki·ªán kh√¥ng x·ª≠ l√Ω
  return new Response("OK", { status: 200 });
}
